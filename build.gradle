plugins {//gradle 플러그인을 설정하여 프로젝트에 추가 기능을 제공
    id 'java'
    id 'java-library'//라이브러리 프로젝트를 위한 빌드 구성 제공. api, implementation 구성을 도입하여 의존성의 가시성 세분화 가능
    id 'org.springframework.boot' version '3.2.1'//Spring Boot 플러그인.snapshot 버전하면 mavenCentral(중앙저장소)에 없음!
    id 'io.spring.dependency-management' version '1.1.4'//Spring 의존성 관리 플러그인
    id 'maven-publish'//Gradle 프로젝트를 maven에 배포할 수 있게 해주는 플러그인. Maven 형식으로 publication하고, Maven repository(로컬 또는 원격)에 배포하는 작업을 자동화한다.
}

group = 'org.example'//프로젝트 그룹ID
version = '0.0.5-SNAPSHOT'//현재 프로젝트 버전
description = 'core'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {//의존성을 다운로드할 repository 설정
    mavenCentral()
}

def lombokVersion = '1.18.32'

dependencies {//프로젝트가 의존하는 라이브러리와 모듈 설정
    api 'org.springframework.boot:spring-boot-starter-data-redis:3.2.1'
    api 'org.springframework.boot:spring-boot-starter-actuator:3.2.1'
    api 'org.springframework.boot:spring-boot-starter-data-jpa:3.2.1'
    api 'org.springframework.boot:spring-boot-starter-jdbc:3.2.1'
//    api 'org.springframework.boot:spring-boot-starter-amqp:3.2.1'
    api 'org.springframework.boot:spring-boot-starter-undertow:3.2.1'
    api 'org.springframework.boot:spring-boot-starter-validation:3.2.1'
    api ('org.springframework.boot:spring-boot-starter-web:3.2.1') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }

//    api 'org.springframework.boot:spring-boot-starter-log4j2'
    api 'org.springframework.boot:spring-boot-test'
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

publishing {//배포 설정 task (artifact 정의 및 배포 설정) - Gradle의 maven-publish 플로그인을 사용???
    publications {//하나 이상의 배포 설정 task block
        mavenJava(MavenPublication) {// mavenJava 라는 이름의 maven 배포 설정 - mavenJava 이름으로 안에 소스코드Jar, Javadoc jar 등을 포함시킬 수 있다.
            //MavenPublication -> maven repository로 배포하기 위한 설정을 의미
            groupId = group
            artifactId = rootProject.name
            version = version

            artifact("build/libs/$rootProject.name-$version-plain.jar") {//배포에 포함시킬 artifact 설정. 특정 파일을 artifact로 추가 (artifact: 빌드 시스템이 생성한 결과물. 최종적으로 배포하거나 다른 프로젝트에서 사용할 수 있는 파일을 말한다. 예를 들어, jar파일, war파일, ear 파일, 소스코드 jar파일, javadoc jar 파일, 네이티브 라이브러리 파일 등)
                extension 'jar'//artifact의 확장자 설정
            }

            from components.java//Gradle의 Java 플러그은에 의해 생 성된 기본 java 컴포넌트(컴파일된 클래스 파일과 기본 jar 파일)를 배포에 포함시킨다.
        }
    }
    repositories {//배포를 어디로 할지 repository 설정. Maven, Ivy 등의 레포지토리 설정 가능
        maven {//maven repository 설정. maven-publish 플러그인과 함꼐 사용한다.
            url = uri('file://Users/syrongk10/projects/syrongk/repos')
        }
    }
}

jar {//jar 파일 구성 task
    enabled = true//활성화 여부 명시
    into("META-INF/maven/$project.group/$project.name") {//META-INF Maven 프로젝트 메타데이터를 저장하는 표준 디렉토리
        from(generatePomFileForMavenJavaPublication)//Gradle이 Maven POM 파일을 생성하는 task - POM 파일 생성하고 JAR파일에 포함할 파일 소스를 지정한다.
        rename ".*", "pom.xml"//생성된 POM 파일의 기본 이름을 pom.xml로 설정(jar 파일에 포함되는 메타데이터 파일이다. maven repository에 배포되는 메타데이터 파일과는 다르다.)
    }
}

bootJar {//Spring Boot용 jar task. 애플리케이션을 독립적으로 실행할 수 있도록 모든 종속성과 설정을 포함한다.
    enabled = false
}

configurations {//의존성 설정을 커스터마이징

}

/*
task: 특정 작업을 수행하는 단위 -> 빌드, 테스트, 패키징, 배포 등의 작업을 자동화하기 위해 사용한다.
기본 제공 task: build, clean, test, assemble 등
task를 정의하면 커맨드라인에서 'gradle <taskName>' 명령어로 실행할 수 있다.
 */
test {//테스트 task 구성
    useJUnitPlatform()
}
/*
script blocks
- allprojects: 모든 프로젝트에 적용되는 설정
- subprojects: 하위 프로젝트에만 적용되는 설정
 */

sourceSets {//소스 코드와 리소스 파일의 디렉토리 설정

}

//buildscript {//빌드 스크립트에서 사용할 의존성 설정
//
//}

